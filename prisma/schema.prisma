generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Programs {
  id                String   @id @default(uuid())
  slug              String   @unique
  name              String?
  description       String?
  numWeeks          Int?
  numClassesPerWeek Int?
  durationMin       Int?
  isDraft           Boolean?
  durationMax       Int?
  active            Boolean? @default(true)
  published         Boolean? @default(true)
  hasSchedule       Boolean? @default(false)
  totalClasses      Int?
  classesId         String?
  boxId             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  classes           Class[]
}

model Box {
  id               String   @id @default(uuid())
  name             String
  location         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isHeadquarter    Boolean
  headquarterBoxId String?

  // Relationships
  users   User[]
  classes Class[]
}

enum Role {
  ADMIN
  MEMBER
  COACH
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  username  String   @unique
  isActive  Boolean  @default(true)
  role      Role     @default(MEMBER)
  athlete   Athlete? @relation(fields: [athleteId], references: [id])
  athleteId String?  @unique

  stripeCustomerId String? // Linked to Stripe Customer for membership payment
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  Box              Box?     @relation(fields: [boxId], references: [id])
  boxId            String?
}

model Athlete {
  id               String  @id @default(uuid())
  userId           String? @unique
  firstName        String
  lastName         String
  email            String  @unique
  gender           String
  profileImageUrl  String?
  phone            String? @default("000000")
  height           Float?
  weight           Float?
  isCoach          Boolean @default(false)
  stripeCustomerId String? // Stripe Customer ID linked to user payments

  // Relations
  memberships    Membership[] // Relation to membership model
  performance    Performance[] // Relation to athlete performance
  enrollments    ClassEnrollment[] // Class enrollments
  coachedClasses Class[]           @relation("CoachClasses") // Classes the athlete is coaching

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?
}

model Membership {
  id                   String         @id @default(uuid())
  type                 MembershipType
  priceId              String? // Stripe Price ID for subscription plans
  stripeSubscriptionId String? // Stripe Subscription ID
  name                 String? // Stripe Product name
  startDate            DateTime
  endDate              DateTime
  athleteId            String
  athlete              Athlete        @relation(fields: [athleteId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Components {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String
  image       String?
  video       String?
  createdAt   DateTime
  classesId   String?
}

enum ClassType {
  CROSSFIT
  YOGA
  HIIT
  WEIGHTLIFTING
  MUAYTHAI
}

model Class {
  id                String            @id @default(uuid())
  name              String
  workouts          Workout[]         @relation("ClassWorkouts")
  enrollments       ClassEnrollment[] // List of enrollments for the class
  Box               Box?              @relation(fields: [boxId], references: [id])
  description       String?
  classType         ClassType?
  date              DateTime?
  capacity          Int?
  coachId           String?
  coach             Athlete?          @relation("CoachClasses", fields: [coachId], references: [id])
  program           Programs?         @relation(fields: [programsId], references: [id])
  programsId        String?
  activeEnrollments Int               @default(0)
  // Recurrence Fields
  isRecurring       Boolean           @default(false)
  recurrenceType    RecurrenceType?
  recurrenceEnd     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boxId     String?

  // Many-to-Many Relation with Workout
  Performance Performance[]
}

model ClassEnrollment {
  id               String                 @id @default(uuid())
  athleteId        String
  classId          String
  checkInAt        DateTime? // When the athlete checked into the class
  isCheckedIn      Boolean?
  status           ClassEnrollmentStatus? @default(ENROLLED)
  attendanceStatus AttendanceStatus?

  athlete Athlete @relation(fields: [athleteId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AttendanceStatus {
  ATTENDED
  MISSED
  BOOKED
}

enum ClassEnrollmentStatus {
  ENROLLED
  CANCELED
  WAITLISTED
}

enum RecurrenceType {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

model Performance {
  id         String   @id @default(uuid())
  athleteId  String // Reference to the Athlete logging the performance
  movementId String // Reference to the Movement
  workoutId  String? // Reference to the associated Workout (optional)
  classId    String? // Optional reference to the Class
  date       DateTime
  sets       Int?
  reps       Int?
  weight     Float?
  weightUnit String?
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  athlete  Athlete  @relation(fields: [athleteId], references: [id])
  movement Movement @relation(fields: [movementId], references: [id])
  workout  Workout? @relation(fields: [workoutId], references: [id])
  class    Class?   @relation(fields: [classId], references: [id])
}

model Workout {
  id                String             @id @default(uuid())
  type              WorkoutType?
  title             String
  movements         WorkoutMovements[] // Relation to movements
  classes           Class[]            @relation("ClassWorkouts")
  Performance       Performance[]
  version           Int                @default(1)
  originalWorkoutId String?
  description       String?
  duration          Int
  intensity         WorkoutIntensity?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model WorkoutMovements {
  id           String   @id @default(uuid())
  workoutId    String
  movementId   String
  workout      Workout  @relation(fields: [workoutId], references: [id])
  movement     Movement @relation(fields: [movementId], references: [id])
  instructions String?
  order        Int
  reps         Int?
  sets         Int?
  weight       Float?
  weightUnit   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movement {
  id        String       @id @default(uuid())
  name      String
  category  MovementType
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  movements    WorkoutMovements[]
  performances Performance[]
}

enum MovementType {
  CARDIO
  STRENGTH
  FLEXIBILITY
  GYMNASTICS
  OLYMPIC_LIFTING
  ACCESSORY
  CORE
  BALANCE
  ENDURANCE
  POWER
  BODYWEIGHT
}

enum WorkoutIntensity {
  Low
  Moderate
  High
}

enum WorkoutType {
  ForTime
  AMRAP
  EMOM
  RFT
  Chipper
  Ladder
  Strength
  Skill
}

enum MembershipType {
  DAY
  MONTH
  UNIT_PACKAGE
  TRIMESTER
  SEMESTER
  SUBSCRIPTION
}
