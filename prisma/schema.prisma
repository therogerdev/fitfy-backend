// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Athlete {
  id              String   @id @default(uuid())
  createdAt       DateTime @default(now())
  firstName       String
  lastName        String
  profileImageUrl String?
  email           String   @unique
  gender          String
  isCoach         Boolean
  isOwner         Boolean
  boxId           String?
  Box             Box?     @relation(fields: [boxId], references: [id])
}

model Box {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  name       String?
  nickname   String?
  street     String?
  city       String?
  state      String?
  postalCode String?
  country    String?
  phone      String?
  email      String?
  website    String?
  athletes   Athlete[]
}

enum Intensity {
  Low
  Medium
  High
}

model Program {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  name        String // Name of the program, e.g., "Compete", "Ignite Total"
  description String? // Optional description of the program

  // Relations
  Workout Workout[]
  Session Session[]
}

model Workout {
  id          String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  title       String
  type        WorkoutType
  description String
  duration    Int // Duration in minutes
  Session     Session[]
  Movement    Movement[]
  Program     Program?    @relation(fields: [programId], references: [id])
  programId   String?
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  dayOfWeek Int // Representing days as numbers (e.g., 1 for Monday)
  startTime DateTime // Use DateTime to capture both date and time
  endTime   DateTime
  programId String
  workoutId String?

  // Relations
  Program Program  @relation(fields: [programId], references: [id])
  Workout Workout? @relation(fields: [workoutId], references: [id])
}

model Movement {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String
  weight    String?
  reps      String[]
  category  String
  Workout   Workout? @relation(fields: [workoutId], references: [id])
  workoutId String?
}

enum WorkoutType {
  ForTime
  AMRAP
  EMOM // Every Minute on the Minute
  RFT // Rounds For Time
  Tabata
  Chipper
  Ladder
  Strength
  Skill
}
