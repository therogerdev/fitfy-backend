generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Box {
  id         String    @id @default(uuid())
  name       String
  nickname   String?
  street     String
  city       String
  state      String
  postalCode String
  country    String
  email      String @unique
  phone      String?
  website    String?
  Program    Program[]
}

model User {
  id       String   @id @default(uuid())
  username String
  password String
  email    String   @unique
  isActive Boolean
  coach    Coach?
  Athlete  Athlete?
}

model Coach {
  id                  String     @id @default(uuid())
  firstName           String
  lastName            String
  slug                String
  avatarImage         String
  sex                 String
  description         String
  descriptionMarkdown String
  website             String
  headerImage         String
  bioVideo            String
  role                String
  published           Boolean
  classCount          Int
  Workouts            Workouts[]
  user                User       @relation(fields: [userId], references: [id])
  userId              String     @unique
  Classes             Classes?   @relation(fields: [classesId], references: [id])
  classesId           Int?
}

model Athlete {
  id        String   @id @default(uuid())
  firstname Int
  lastName  Int
  email     Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  Classes   Classes? @relation(fields: [classesId], references: [id])
  classesId Int?
}

model Classes {
  id           Int       @id @default(autoincrement())
  startTime    DateTime
  date         DateTime
  workout      Int       @unique
  participants Athlete[]
  coach        Coach[]
}

model Program {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime
  name        String
  description String
  box         Box      @relation(fields: [boxId], references: [id])
  boxId       String
}

model Workouts {
  id          String       @id @default(uuid())
  type        WorkoutType?
  title       String
  description String?
  createdAt   DateTime
  duration    Int
  intensity   String
  movements   String

  Coach   Coach?  @relation(fields: [coachId], references: [id])
  coachId String?
}

model Movement {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String
  weight    String?
  reps      String[]
  category  String
  workoutId String?
}

enum WorkoutType {
  ForTime
  AMRAP
  EMOM // Every Minute on the Minute
  RFT // Rounds For Time
  Tabata
  Chipper
  Ladder
  Strength
  Skill
}
