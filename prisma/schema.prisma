generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Programs {
  id                String   @id @default(uuid())
  slug              String   @unique
  name              String?
  description       String?
  numWeeks          Int?
  numClassesPerWeek Int?
  durationMin       Int?
  isDraft           Boolean?
  durationMax       Int?
  active            Boolean? @default(true)
  published         Boolean? @default(true)
  hasSchedule       Boolean? @default(false)
  totalClasses      Int?
  classesId         String?
  boxId             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  classes           Class[]
}

model Box {
  id               String   @id @default(uuid())
  name             String
  location         String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  isHeadquarter    Boolean
  headquarterBoxId String?

  // Relationships
  users   User[]
  classes Class[]
}

enum Role {
  ADMIN
  MEMBER
  COACH
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  username  String   @unique
  isActive  Boolean  @default(true)
  role      Role     @default(MEMBER)
  athlete   Athlete? @relation(fields: [athleteId], references: [id])
  athleteId String?  @unique

  stripeCustomerId String? // Linked to Stripe Customer for membership payment
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  Box              Box?     @relation(fields: [boxId], references: [id])
  boxId            String?
}

model Athlete {
  id               String  @id @default(uuid())
  userId           String? @unique
  firstName        String
  lastName         String
  email            String  @unique
  gender           String
  profileImageUrl  String?
  phone            String? @default("000000")
  height           Float?
  weight           Float?
  isCoach          Boolean @default(false)
  stripeCustomerId String? // Stripe Customer ID linked to user payments

  // Relations
  memberships    Membership[] // Relation to membership model
  performance    Performance[] // Relation to athlete performance
  enrollments    ClassEnrollment[] // Class enrollments
  coachedClasses Class[]           @relation("CoachClasses") // Classes the athlete is coaching

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?
}

model Membership {
  id                   String         @id @default(uuid())
  type                 MembershipType
  priceId              String? // Stripe Price ID for subscription plans
  stripeSubscriptionId String? // Stripe Subscription ID
  name                 String? // Stripe Product name
  startDate            DateTime
  endDate              DateTime
  athleteId            String
  athlete              Athlete        @relation(fields: [athleteId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Components {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String
  image       String?
  video       String?
  createdAt   DateTime
  classesId   String?
}

enum ClassType {
  CROSSFIT
  YOGA
  HIIT
  WEIGHTLIFTING
  MUAYTHAI
  // Add more as needed
}

model Class {
  id                String            @id @default(uuid())
  name              String
  description       String?
  classType         ClassType?
  date              DateTime?
  capacity          Int?
  coachId           String?
  coach             Athlete?          @relation("CoachClasses", fields: [coachId], references: [id])
  program           Programs?         @relation(fields: [programsId], references: [id])
  programsId        String?
  enrollments       ClassEnrollment[] // List of enrollments for the class
  activeEnrollments Int               @default(0)
  // Recurrence Fields
  isRecurring       Boolean           @default(false)
  recurrenceType    RecurrenceType?
  recurrenceEnd     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Box       Box?     @relation(fields: [boxId], references: [id])
  boxId     String?

  workoutId String?   // Foreign key to Workout
  workout   Workout?  @relation("WorkoutClasses", fields: [workoutId], references: [id])
}
model ClassEnrollment {
  id               String                 @id @default(uuid())
  athleteId        String
  classId          String
  checkInAt        DateTime? // When the athlete checked into the class
  isCheckedIn      Boolean?
  status           ClassEnrollmentStatus? @default(ENROLLED)
  attendanceStatus AttendanceStatus?

  athlete Athlete @relation(fields: [athleteId], references: [id])
  class   Class   @relation(fields: [classId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AttendanceStatus {
  ATTENDED
  MISSED
  BOOKED
}

enum ClassEnrollmentStatus {
  ENROLLED
  CANCELED
  WAITLISTED
}

enum RecurrenceType {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

model Performance {
  id        String   @id @default(uuid())
  athleteId String
  workout   String // The name of the workout or activity
  result    String // Results or stats for the workout (time, weight lifted, etc.)
  date      DateTime

  athlete Athlete @relation(fields: [athleteId], references: [id])
}

model Workout {
  id                String            @id @default(uuid())
  type              WorkoutType?
  title             String
  version           Int               @default(1) // Indicates the version of the workout
  originalWorkoutId String?           // Reference to the original workout if it's a clone
  description       String?
  duration          Int
  intensity         WorkoutIntensity?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  movements Movement[] @relation("WorkoutMovements") // One-to-many relation with Movements
  classes   Class[]     @relation("WorkoutClasses")  // One-to-many relation with Classes
}

model Movement {
  id           String       @id @default(uuid())
  name         String
  category     MovementType
  instructions String? // Optional detailed instructions for the movement
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  workoutId String?
  workout   Workout? @relation("WorkoutMovements", fields: [workoutId], references: [id])
}

enum MovementType {
  CARDIO // Cardio movements like Running, Rowing
  STRENGTH // Strength movements like Deadlift, Squat
  FLEXIBILITY // Flexibility movements like Yoga, Stretching
  GYMNASTICS // Gymnastics movements like Pull-Ups, Handstands
  OLYMPIC_LIFTING // Olympic lifts like Snatch, Clean and Jerk
  ACCESSORY // Accessory movements like Dumbbell Rows, Tricep Dips
  CORE // Core movements like Planks, Sit-Ups
  BALANCE // Balance exercises like Single-Leg Deadlift
  ENDURANCE // Endurance movements like Long Runs
  POWER // Power movements like Box Jumps, Sprints
  BODYWEIGHT // Bodyweight movements like Push-Ups, Air Squats
}

enum WorkoutIntensity {
  Low
  Moderate
  High
}

enum WorkoutType {
  ForTime
  AMRAP
  EMOM
  RFT
  Chipper
  Ladder
  Strength
  Skill
}

enum MembershipType {
  DAY
  MONTH
  UNIT_PACKAGE
  TRIMESTER
  SEMESTER
  SUBSCRIPTION
}
