generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Box {
  id               String     @id @default(uuid())
  name             String
  nickname         String?
  street           String?
  city             String?
  state            String?
  postalCode       String?
  country          String?
  email            String?    @unique
  website          String?
  phone            String?
  headquarter      Boolean    @default(false)
  headquarterBoxId String? // For non-headquarter boxes to reference a headquarter
  branches         Box[]      @relation("HeadquarterBranches") // For headquarter referencing its branches
  headquarterBox   Box?       @relation("HeadquarterBranches", fields: [headquarterBoxId], references: [id])
  Program          Programs[]
}

enum Role {
  ADMIN
  MEMBER
  COACH
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  username  String   @unique
  isActive  Boolean  @default(true)
  role      Role
  athlete   Athlete? @relation(fields: [athleteId], references: [id])
  athleteId String?  @unique

  stripeCustomerId String? // Linked to Stripe Customer for membership payment
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Athlete {
  id               String        @id @default(uuid())
  userId           String?       @unique
  firstName        String
  lastName         String
  email            String        @unique
  gender           String
  profileImageUrl  String?
  height           Float?
  weight           Float?
  isCoach          Boolean       @default(false)
  stripeCustomerId String? // Stripe Customer ID linked to user payments
  memberships      Membership[] // Relation to membership model
  performance      Performance[] // Relation to athlete performance
  classes          Class[]       @relation("ClassEnrollment")
  coachedClasses   Class[]       @relation("CoachClasses")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User? // Relation to the User model

  ClassEnrollment ClassEnrollment[]
}

model Membership {
  id                   String         @id @default(uuid())
  type                 MembershipType
  priceId              String? // Stripe Price ID for subscription plans
  stripeSubscriptionId String? // Stripe Subscription ID
  startDate            DateTime
  endDate              DateTime
  athleteId            String
  athlete              Athlete        @relation(fields: [athleteId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Components {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String
  image       String?
  video       String?
  createdAt   DateTime
  classesId   String?
}

enum ClassType {
  CROSSFIT
  YOGA
  HIIT
  WEIGHTLIFTING
  MUAYTHAI
  // Add more as needed
}

model Class {
  id              String            @id @default(uuid())
  name            String
  description     String?
  classType       ClassType?
  startTime       DateTime?
  endTime         DateTime?
  capacity        Int?
  coachId         String?
  coach           Athlete?          @relation("CoachClasses", fields: [coachId], references: [id])
  participants    Athlete[]         @relation("ClassEnrollment")
  ClassEnrollment ClassEnrollment[]

  // Recurrence Fields
  isRecurring    Boolean         @default(false)
  recurrenceType RecurrenceType?
  recurrenceEnd  DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClassEnrollment {
  id        String    @id @default(uuid())
  athleteId String
  classId   String
  checkInAt DateTime? // When the athlete checked into the class
  athlete   Athlete   @relation(fields: [athleteId], references: [id])
  class     Class     @relation(fields: [classId], references: [id])
}

enum RecurrenceType {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  CUSTOM
}

model Performance {
  id        String   @id @default(uuid())
  athleteId String
  workout   String // The name of the workout or activity
  result    String // Results or stats for the workout (time, weight lifted, etc.)
  date      DateTime

  athlete Athlete @relation(fields: [athleteId], references: [id])
}

model Programs {
  id                String   @id @default(uuid())
  slug              String   @unique
  name              String?
  description       String?
  numWeeks          Int?
  numClassesPerWeek Int?
  durationMin       Int?
  isDraft           Boolean?
  durationMax       Int?
  active            Boolean? @default(true)
  published         Boolean? @default(true)
  hasSchedule       Boolean? @default(false)
  totalClasses      Int?
  classesId         String?
  Box               Box?     @relation(fields: [boxId], references: [id])
  boxId             String?
  createdAt         DateTime
}

model Workout {
  id          String       @id @default(uuid())
  type        WorkoutType?
  title       String
  description String?
  createdAt   DateTime
  duration    Int
  intensity   String?
  movements   Movement[]
}

model Movement {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String
  weight    String?
  reps      String[]
  category  String
  workoutId String?
  Workout   Workout? @relation(fields: [workoutId], references: [id])
}

enum WorkoutType {
  ForTime
  AMRAP
  EMOM
  RFT
  Tabata
  Chipper
  Ladder
  Strength
  Skill
}

enum MembershipType {
  DAY
  MONTH
  UNIT_PACKAGE
  TRIMESTER
  SEMESTER
  SUBSCRIPTION
}
