generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Box {
  id               String     @id @default(uuid())
  name             String
  nickname         String?
  street           String?
  city             String?
  state            String?
  postalCode       String?
  country          String?
  email            String?    @unique
  website          String?
  phone            String?
  headquarter      Boolean    @default(false)
  headquarterBoxId String? // For non-headquarter boxes to reference a headquarter
  branches         Box[]      @relation("HeadquarterBranches") // For headquarter referencing its branches
  headquarterBox   Box?       @relation("HeadquarterBranches", fields: [headquarterBoxId], references: [id])
  Program          Programs[]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  username  String
  isActive  Boolean
  role      Role
  athlete   Athlete? @relation(fields: [athleteId], references: [id])
  athleteId String?
}

enum Role {
  ADMIN
  MEMBER
  COACH
}

model Coach {
  id                  String           @id @default(uuid())
  firstName           String
  lastName            String
  slug                String?
  description         String?
  descriptionMarkdown String?
  website             String?
  headerImage         String?
  bioVideo            String?
  role                String?
  published           Boolean?
  classCount          Int?
  userId              String?          @unique
  classesId           String?
  speciality          CoachSpeciality?
  gender              String
  profileImageUrl     String?
  Classes             Classes?         @relation(fields: [classesId], references: [id])
  Workouts            Workout[]
}

model Athlete {
  id              String        @id @default(uuid())
  userId          String?       @unique // Foreign key reference to User
  classesId       String? // Foreign key reference to Classes
  lastName        String
  email           String        @unique
  gender          String
  profileImageUrl String?
  firstName       String
  height          Float?
  weight          Float?
  classes         Classes?      @relation(fields: [classesId], references: [id])
  memberships     Membership[] // Relation to Membership model
  Performance     Performance[] // Relation to performance data

  User User[]

  Classes Classes[] @relation("AthleteClasses")
}

model Components {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String
  image       String?
  video       String?
  createdAt   DateTime
  classesId   String?
  Classes     Classes? @relation(fields: [classesId], references: [id])
}

model Classes {
  id       String    @id @default(uuid())
  name     String
  schedule DateTime
  athletes Athlete[] @relation("AthleteClasses")

  Coach Coach[]

  Athlete Athlete[]

  Components Components[]

  Programs Programs[]
}

model Membership {
  id        String   @id @default(uuid())
  type      String
  startDate DateTime
  endDate   DateTime
  athlete   Athlete  @relation(fields: [athleteId], references: [id])
  athleteId String
}

model Performance {
  id        String   @id @default(uuid())
  athlete   Athlete  @relation(fields: [athleteId], references: [id])
  athleteId String
  date      DateTime
  analysis  Json // Store analysis data in JSON format
}

model Programs {
  id                String   @id @default(uuid())
  slug              String   @unique
  name              String?
  description       String?
  numWeeks          Int?
  numClassesPerWeek Int?
  durationMin       Int?
  isDraft           Boolean?
  durationMax       Int?
  active            Boolean? @default(true)
  published         Boolean? @default(true)
  hasSchedule       Boolean? @default(false)
  totalClasses      Int?
  Classes           Classes? @relation(fields: [classesId], references: [id])
  classesId         String?
  Box               Box?     @relation(fields: [boxId], references: [id])
  boxId             String?
  createdAt         DateTime
}

model Workout {
  id          String       @id @default(uuid())
  type        WorkoutType?
  title       String
  description String?
  createdAt   DateTime
  duration    Int
  intensity   String?
  coachId     String?
  movements   Movement[]
  Coach       Coach?       @relation(fields: [coachId], references: [id])
}

model Movement {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String
  weight    String?
  reps      String[]
  category  String
  workoutId String?
  Workout   Workout? @relation(fields: [workoutId], references: [id])
}

enum WorkoutType {
  ForTime
  AMRAP
  EMOM
  RFT
  Tabata
  Chipper
  Ladder
  Strength
  Skill
}

enum CoachSpeciality {
  CrossFit
  Strength
  Endurance
  Gymnastics
  Weightlifting
}
