generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Box {
  id              String     @id @default(uuid())
  name            String
  nickname        String?
  street          String?
  city            String?
  state           String?
  postalCode      String?
  country         String?
  email           String?    @unique
  website         String?
  phone           String?
  headquarter     Boolean    @default(false)
  headquarterBoxId String?   // For non-headquarter boxes to reference a headquarter
  branches        Box[]      @relation("HeadquarterBranches")  // For headquarter referencing its branches
  headquarterBox  Box?       @relation("HeadquarterBranches", fields: [headquarterBoxId], references: [id])
  Program         Program[]
}

model User {
  id       String   @id @default(uuid())
  username String
  password String
  email    String   @unique
  isActive Boolean
  Athlete  Athlete?
  coach    Coach?
}

model Coach {
  id                  String           @id @default(uuid())
  firstName           String
  lastName            String
  slug                String?
  description         String?
  descriptionMarkdown String?
  website             String?
  headerImage         String?
  bioVideo            String?
  role                String?
  published           Boolean?
  classCount          Int?
  userId              String?          @unique
  classesId           String?
  speciality          CoachSpeciality?
  gender              String
  profileImageUrl     String?
  Classes             Classes?         @relation(fields: [classesId], references: [id])
  user                User?            @relation(fields: [userId], references: [id])
  Workouts            Workout[]
}

model Athlete {
  id              String   @id @default(uuid())
  classesId       String?
  userId          String?  @unique
  lastName        String
  email           String   @unique
  gender          String
  profileImageUrl String?
  firstName       String
  Classes         Classes? @relation(fields: [classesId], references: [id])
  user            User?    @relation(fields: [userId], references: [id])
}

model Classes {
  id           String       @id @default(uuid())
  startTime    DateTime
  date         DateTime
  participants Athlete[]
  coach        Coach[]
  components   Components[]
}

model Components {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String
  image       String?
  video       String?
  createdAt   DateTime
  classesId   String?
  Classes     Classes? @relation(fields: [classesId], references: [id])
}

model Program {
  createdAt   DateTime
  name        String
  description String?
  boxId       String?
  id          String   @id @default(uuid())
  Box         Box?     @relation(fields: [boxId], references: [id])
}

model Workout {
  id          String       @id @default(uuid())
  type        WorkoutType?
  title       String
  description String?
  createdAt   DateTime
  duration    Int
  intensity   String?
  coachId     String?
  movements   Movement[]
  Coach       Coach?       @relation(fields: [coachId], references: [id])
}

model Movement {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String
  weight    String?
  reps      String[]
  category  String
  workoutId String?
  Workout   Workout? @relation(fields: [workoutId], references: [id])
}

enum WorkoutType {
  ForTime
  AMRAP
  EMOM
  RFT
  Tabata
  Chipper
  Ladder
  Strength
  Skill
}

enum CoachSpeciality {
  CrossFit
  Strength
  Endurance
  Gymnastics
  Weightlifting
}
